The ``add_integer`` module
======================

Using ``add``
-------------------

Write a function that adds 2 integers.

    Prototype: def add_integer(a, b=98):

    if a != a:
        a = 89
    if b != b:
        b = 89
    if a is None or (type(a) is not int and type(a) is not float):
        raise TypeError("a must be an integer")
    if type(b) is not int and type(b) is not float:
        raise TypeError("b must be an integer")
    return int(a) + int(b)

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(3, 5)
8
>>> add_integer(3.5, 5)
8
>>> add_integer(3, 5.5)
8
>>> add_integer(3.5, 5.5)
8
>>> add_integer("3", 5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in add_integer
TypeError: a must be an integer
>>> add_integer(3, "5")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in add_integer
TypeError: b must be an integer
>>> add_integer("3", "5")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in add_integer
TypeError: a must be an integer
>>> a = float("inf")
>>> b = 10
>>> add_integer(a, b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 8, in add_integer
OverflowError: cannot convert float infinity to integer
